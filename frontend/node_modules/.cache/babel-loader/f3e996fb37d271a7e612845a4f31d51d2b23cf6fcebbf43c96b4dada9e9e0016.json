{"ast":null,"code":"var _jsxFileName = \"D:\\\\Portfolio\\\\LMS\\\\frontend\\\\src\\\\pages\\\\admin\\\\AddQuiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axiosInstance from '../../api/axiosConfig';\nimport * as XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddQuiz = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleFileUpload = async e => {\n    e.preventDefault();\n    if (!file) {\n      alert('Please upload a file.');\n      return;\n    }\n    setIsUploading(true); // Show a loading state\n\n    const reader = new FileReader();\n    reader.onload = async event => {\n      var _quizData$;\n      const data = new Uint8Array(event.target.result);\n      const workbook = XLSX.read(data, {\n        type: 'array'\n      });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const quizData = XLSX.utils.sheet_to_json(worksheet);\n\n      // Ensure the data matches the backend format\n      const formattedQuiz = {\n        title: ((_quizData$ = quizData[0]) === null || _quizData$ === void 0 ? void 0 : _quizData$.QuizTitle) || 'Untitled Quiz',\n        questions: quizData.map(row => ({\n          questionText: row.Question,\n          options: [row.Option1, row.Option2, row.Option3, row.Option4],\n          correctAnswer: row.CorrectAnswer\n        }))\n      };\n      try {\n        await axiosInstance.post('/quizzes/upload', formattedQuiz);\n        alert('Quiz uploaded successfully!');\n        setFile(null);\n      } catch (error) {\n        console.error('Error uploading quiz:', error);\n        alert('Failed to upload quiz.');\n      } finally {\n        setIsUploading(false); // Hide the loading state\n      }\n    };\n    reader.readAsArrayBuffer(file);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Complete Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFileUpload,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Upload .xlsx File:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".xlsx\",\n          onChange: handleFileChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isUploading,\n        children: isUploading ? 'Uploading...' : 'Upload'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(AddQuiz, \"+tBvX07pSjLNzdBVhcXC6Ud0JxY=\");\n_c = AddQuiz;\nexport default AddQuiz;\nvar _c;\n$RefreshReg$(_c, \"AddQuiz\");","map":{"version":3,"names":["React","useState","axiosInstance","XLSX","jsxDEV","_jsxDEV","AddQuiz","_s","file","setFile","isUploading","setIsUploading","handleFileChange","e","target","files","handleFileUpload","preventDefault","alert","reader","FileReader","onload","event","_quizData$","data","Uint8Array","result","workbook","read","type","sheetName","SheetNames","worksheet","Sheets","quizData","utils","sheet_to_json","formattedQuiz","title","QuizTitle","questions","map","row","questionText","Question","options","Option1","Option2","Option3","Option4","correctAnswer","CorrectAnswer","post","error","console","readAsArrayBuffer","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","accept","onChange","required","disabled","_c","$RefreshReg$"],"sources":["D:/Portfolio/LMS/frontend/src/pages/admin/AddQuiz.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axiosInstance from '../../api/axiosConfig';\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst AddQuiz = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n\r\n    const handleFileChange = (e) => {\r\n        setFile(e.target.files[0]);\r\n    };\r\n\r\n    const handleFileUpload = async (e) => {\r\n        e.preventDefault();\r\n        if (!file) {\r\n            alert('Please upload a file.');\r\n            return;\r\n        }\r\n\r\n        setIsUploading(true); // Show a loading state\r\n\r\n        const reader = new FileReader();\r\n        reader.onload = async (event) => {\r\n            const data = new Uint8Array(event.target.result);\r\n            const workbook = XLSX.read(data, { type: 'array' });\r\n            const sheetName = workbook.SheetNames[0];\r\n            const worksheet = workbook.Sheets[sheetName];\r\n            const quizData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n            // Ensure the data matches the backend format\r\n            const formattedQuiz = {\r\n                title: quizData[0]?.QuizTitle || 'Untitled Quiz',\r\n                questions: quizData.map((row) => ({\r\n                    questionText: row.Question,\r\n                    options: [row.Option1, row.Option2, row.Option3, row.Option4],\r\n                    correctAnswer: row.CorrectAnswer,\r\n                })),\r\n            };\r\n\r\n            try {\r\n                await axiosInstance.post('/quizzes/upload', formattedQuiz);\r\n                alert('Quiz uploaded successfully!');\r\n                setFile(null);\r\n            } catch (error) {\r\n                console.error('Error uploading quiz:', error);\r\n                alert('Failed to upload quiz.');\r\n            } finally {\r\n                setIsUploading(false); // Hide the loading state\r\n            }\r\n        };\r\n        reader.readAsArrayBuffer(file);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Upload Complete Quiz</h1>\r\n            <form onSubmit={handleFileUpload}>\r\n                <label>\r\n                    Upload .xlsx File:\r\n                    <input type=\"file\" accept=\".xlsx\" onChange={handleFileChange} required />\r\n                </label>\r\n                <br />\r\n                <button type=\"submit\" disabled={isUploading}>\r\n                    {isUploading ? 'Uploading...' : 'Upload'}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddQuiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}